function struc = lag_vel_t0_struc_func_calc(u,v,lon,lat,oceantime,ui,vi,loni,lati,oceantimei, par)
%*************************************************************************
%  Function calculate the Langrangian structure function. Output is a
%  single layer structure.
%
% nt = no. locations, nt = no. times, np = no. pairs
%*************************************************************************
%   Required Input
%-------------------------------------------------------------------------
%	x,y         : positions [nl,nt] (lon,lat in deg. or m)
%	u,v         : meridinoal and zonal velocity [nl,nt] (m/s)
%   oceantime   : time [1,nt] (datenumber)
%-------------------------------------------------------------------------
%   Optional Input
%-------------------------------------------------------------------------
%   par         : a structure containing any parameters to be saved to the
%                   structure
%-------------------------------------------------------------------------
%   Default Output
%-------------------------------------------------------------------------
%   ul,ut       : longitudinal and transverse relative velocity components
%                 [np,nt] (m/s)
%   r           : separation distance for each pair [np,nt] (km)
%   oceantime   : time [1,nt] (datenumber)
%   attributes  : structure containing the date modified
%-------------------------------------------------------------------------
%   Optional Output
%-------------------------------------------------------------------------
%   dx,dy       : meridional and zone separations [np,nt] (m)
%   latc,lonc   : average position of sf values [np,nt] (lat lon in deg.)
%*************************************************************************
%  Written by Jenna Pearson, and adapted from Helga Huntley
%*************************************************************************

% check to make sure par is defined
if nargin < 6
    par.empty = 'True';
end

% make sure oceantime is a row vector
if size(oceantime,1)>size(oceantime,2)
    oceantime = oceantime';
end

% create new variables
t = repmat(oceantime,size(u,1),1);
t = datetime(t, 'ConvertFrom', 'datenum');
% ti = repmat(oceantimei,size(u,2),1);
ti = datetime(oceantimei, 'ConvertFrom', 'datenum');
% ui = repmat(ui,size(u,2),1);
% vi = repmat(vi,size(u,2),1);
% loni = repmat(loni,size(u,2),1);
% lati = repmat(lati,size(u,2),1);
% switch dimensions
u = u';
v = v';
lon = lon';
lat = lat';
t = t';
nt = size(u,1);
%-------------------------------------------------------------------------
% Set up variables
%-------------------------------------------------------------------------

ttmp  = cell(1,nt);   % sep time
dutmp = cell(1,nt);   % zonal velocity increment
dvtmp = cell(1,nt);   % meridional velocity increment

%-------------------------------------------------------------------------
% Compute distances and velocity differences
%-------------------------------------------------------------------------

body('Calculating relative velocities.')
parfor j = 1%:nt-1
    nn  = nt - j;

    ttmp{j}  = days(repmat(ti,nn,1) - t(j:nt,:));
    
    dutmp{j} = repmat(ui,nn,1) - u(j:nt,:);

    dvtmp{j} = repmat(vi,nn,1) - v(j:nt,:);
    
    rtmp{j}  = m_idist(repmat(loni,nn,1),...
    repmat(lati,nn,1),lon(j+1:nt,:),lat(j:nt,:));
    
    dxtmp{j} = m_idist(repmat(loni,nn,1),...
        repmat(lati,nn,1),lon(j:nt,:),repmat(lati,nn,1));
    dxtmp{j}(repmat(loni,nn,1) < lon(j:nt,:)) = ...
        -dxtmp{j}(repmat(loni,nn,1) < lon(j:nt,:));
    
    dytmp{j} = m_idist(repmat(loni,nn,1),...
        repmat(lati,nn,1),repmat(loni,nn,1),lat(j:nt,:));
    dytmp{j}(repmat(lati,nn,1) < lat(j:nt,:)) = ...
        -dytmp{j}(repmat(lati,nn,1) < lat(j:nt,:));

    prev=round((j-1)/(nt-1),2);
    if round(j/(nt-1),2)~=prev
        disp(['PROGRESS: ', int2str(round(j/(nt-1),2)*100), '%'])
    end
    
%     
%     ttmp{j}  = days(ti(1,:) - t(j+1:nt,:));
%     
%     dutmp{j} = ui(1,:) - u(j+1:nt,:);
% 
%     dvtmp{j} = vi(1,:) - v(j+1:nt,:);
%     
%     rtmp{j}  = m_idist(loni(1,:),...
%     repmat(lat(1,:),nn,1),lon(j+1:nt,:),lat(j+1:nt,:));
%     
%     dxtmp{j} = m_idist(repmat(lon(1,:),nn,1),...
%         repmat(lat(1,:),nn,1),lon(j+1:nt,:),repmat(lat(1,:),nn,1));
%     
%     dxtmp{j}(repmat(lon(1,:),nn,1) < lon(j+1:nt,:)) = ...
%         -dxtmp{j}(repmat(lon(1,:),nn,1) < lon(j+1:nt,:));
%     
%     dytmp{j} = m_idist(repmat(lon(1,:),nn,1),...
%         repmat(lat(1,:),nn,1),repmat(lon(1,:),nn,1),lat(j+1:nt,:));
%     
%     dytmp{j}(repmat(lat(1,:),nn,1) < lat(j+1:nt,:)) = ...
%         -dytmp{j}(repmat(lat(1,:),nn,1) < lat(j+1:nt,:));
% 
%     prev=round((j-1)/(nt-1),2);
%     if round(j/(nt-1),2)~=prev
%         disp(['PROGRESS: ', int2str(round(j/(nt-1),2)*100), '%'])
%     end
end

tau  = abs(cell2mat(cat(2,ttmp(:))));
du = cell2mat(cat(2,dutmp(:)));
dv = cell2mat(cat(2,dvtmp(:)));
r  = cell2mat(cat(2,rtmp(:)));
dx = cell2mat(cat(2,dxtmp(:)));
dy = cell2mat(cat(2,dytmp(:)));

%-------------------------------------------------------------------------
% Convert to longitudinal and transverse components
%-------------------------------------------------------------------------
body('Converting to ul and ut.')
dul = ( du.*dx + dv.*dy) ./ r;
dut = (-du.*dy + dv.*dx) ./ r;

%-------------------------------------------------------------------------
% Set the tau = zero times to NaNs
%-------------------------------------------------------------------------
zero_ind = tau == 0;
tau(zero_ind) = NaN;
du(zero_ind) = NaN;
dv(zero_ind) = NaN;
dx(zero_ind) = NaN;
dy(zero_ind) = NaN;
d
%-------------------------------------------------------------------------
% Save data to structure
%-------------------------------------------------------------------------
body('Saving data to structure.')
struc.par = par;
struc.du = du;
struc.dv = dv;
struc.dul = dul;
struc.dut = dut;
struc.tau = tau;
struc.oceantime = oceantime;
struc.oceantimei = oceantimei;
struc.ui = ui;
struc.vi = vi;
struc.loni = loni;
struc.lati = lati;
struc.attributes = {['date modified: ' datestr(date)]};

end
